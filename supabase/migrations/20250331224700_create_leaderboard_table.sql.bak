-- Create the leaderboard table
CREATE TABLE leaderboard (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users NOT NULL,
    game_name VARCHAR NOT NULL,
    score INTEGER NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    username TEXT,
    FOREIGN KEY (user_id, username) REFERENCES public.profiles (id, username)
);

-- Create an index for faster leaderboard queries
CREATE INDEX leaderboard_game_score_idx ON leaderboard (game_name, score DESC);

-- Drop the old game_scores table since we're replacing it
DROP TABLE IF EXISTS game_scores;

-- Create a view for the top scores per game
CREATE VIEW top_scores AS
SELECT DISTINCT ON (game_name, user_id)
    l.id,
    l.user_id,
    l.game_name,
    l.score,
    l.created_at,
    p.username,
    p.avatar_url
FROM leaderboard l
JOIN profiles p ON l.user_id = p.id
ORDER BY game_name, user_id, score DESC;

-- Grant access to authenticated users
ALTER TABLE leaderboard ENABLE ROW LEVEL SECURITY;

-- Allow users to view all scores
CREATE POLICY "Users can view all scores"
ON leaderboard FOR SELECT
TO authenticated
USING (true);

-- Allow users to insert their own scores
CREATE POLICY "Users can insert their own scores"
ON leaderboard FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);
